# ‚úÖ PASSO 17 - CHECKLIST DE TESTES DE INTEGRA√á√ÉO

**Data de Cria√ß√£o:** 2024  
**Status:** 80% Completo (Arquivos criados, pronto para execu√ß√£o)  
**Pr√≥ximo:** Executar `npm run test:integration`

---

## üì¶ ARQUIVOS CRIADOS

### Testes de Integra√ß√£o

- [x] `src/__tests__/integration/full-flow.test.ts` (450+ linhas)
  - [x] Cen√°rio 1: Cria√ß√£o de Reserva
  - [x] Cen√°rio 2: Atualiza√ß√£o de Reserva
  - [x] Cen√°rio 3: Cancelamento
  - [x] Cen√°rio 4: Reconcilia√ß√£o
  - [x] Teste ACID

- [x] `src/__tests__/integration/webhook-flow.test.ts` (320+ linhas)
  - [x] Test 1: POST Webhook (status 200)
  - [x] Test 2: Webhook Armazenado
  - [x] Test 3: Reservation Criado
  - [x] Test 4: EventId Retornado
  - [x] Test 5: Webhook Inv√°lido
  - [x] Test 6: Idempot√™ncia

- [x] `src/__tests__/integration/mapping-flow.test.ts` (280+ linhas)
  - [x] Test 1: Criar Mapping
  - [x] Test 2: Validar 1:1
  - [x] Test 3: Desmapar
  - [x] Test 4: Remapar
  - [x] Test 5: Cascade Delete
  - [x] Test 6: Query Mappings

- [x] `src/__tests__/integration/pin-generation-flow.test.ts` (390+ linhas)
  - [x] Test 1: Gerar PIN
  - [x] Test 2: PIN Seguro
  - [x] Test 3: Rota√ß√£o de PIN
  - [x] Test 4: Expira√ß√£o
  - [x] Test 5: Revogar
  - [x] Test 6: Query por Reservation
  - [x] Test 7: Generator Consistency

### Documenta√ß√£o

- [x] `src/__tests__/integration/README.md` (Guia de testes)
- [x] `Pr√≥ximos Passos/PASSO_17_TESTES.md` (Documenta√ß√£o completa)
- [x] `Pr√≥ximos Passos/PASSO_17_CHECKLIST.txt` (Este arquivo)

### Configura√ß√£o

- [x] `jest.setup.js` (Inicializa√ß√£o de ambiente)
- [x] `jest.config.js` (Verificado e otimizado)
- [x] `package.json` - npm scripts adicionados:
  - [x] `"test:integration"`: `jest --testPathPattern=__tests__/integration --detectOpenHandles`
  - [x] `"test:integration:watch"`: `jest --testPathPattern=__tests__/integration --watch`

---

## üîß CONFIGURA√á√ÉO NECESS√ÅRIA

### Banco de Dados PostgreSQL

- [ ] PostgreSQL instalado e rodando
- [ ] Banco de testes criado:
  ```sql
  CREATE DATABASE tuya_locks_test;
  ```
- [ ] Migrations executadas:
  ```bash
  npx prisma migrate dev
  ```
- [ ] Vari√°vel `DATABASE_URL` configurada:
  ```
  DATABASE_URL=postgresql://user:pass@localhost:5432/tuya_locks_test
  ```

### Redis

- [ ] Redis instalado e rodando (porta 6379)
- [ ] Verificar conectividade:
  ```bash
  redis-cli ping  # Deve retornar PONG
  ```
- [ ] Vari√°vel `REDIS_URL` configurada:
  ```
  REDIS_URL=redis://localhost:6379/1
  ```

### Node.js

- [ ] Node.js v16+ instalado
- [ ] npm dependencies instaladas:
  ```bash
  npm install
  ```

### Vari√°veis de Ambiente

Adicionar em `.env` ou `jest.setup.js`:
```
NODE_ENV=test
DATABASE_URL=postgresql://localhost:5432/tuya_locks_test
REDIS_URL=redis://localhost:6379/1
JWT_SECRET=test-secret-key
```

---

## üöÄ EXECU√á√ÉO DOS TESTES

### Fase 1: Verifica√ß√£o (PR√â-REQUISITOS)

```bash
# ‚úÖ Verificar PostgreSQL
psql -U postgres -d tuya_locks_test -c "SELECT 1"
# Esperado: (1 row)

# ‚úÖ Verificar Redis
redis-cli ping
# Esperado: PONG

# ‚úÖ Verificar Node.js
node --version
# Esperado: v16.x.x ou superior

# ‚úÖ Verificar depend√™ncias
npm list jest typescript @prisma/client
# Esperado: Todas instaladas
```

### Fase 2: Execu√ß√£o dos Testes

```bash
# 1Ô∏è‚É£ Executar todos os testes de integra√ß√£o
npm run test:integration

# Esperado Output:
# PASS  src/__tests__/integration/full-flow.test.ts
# PASS  src/__tests__/integration/webhook-flow.test.ts
# PASS  src/__tests__/integration/mapping-flow.test.ts
# PASS  src/__tests__/integration/pin-generation-flow.test.ts
#
# Test Suites: 4 passed, 4 total
# Tests:       23 passed, 23 total
# Time:        60-90 segundos
```

### Fase 3: Modo Watch (Development)

```bash
# 2Ô∏è‚É£ Rodar em modo watch (√∫til durante desenvolvimento)
npm run test:integration:watch

# Agora edite arquivos e veja testes re-executando
```

### Fase 4: Coverage Report

```bash
# 3Ô∏è‚É£ Gerar relat√≥rio de cobertura
npm run test:coverage -- --testPathPattern=__tests__/integration

# Gera:
# - Terminal output com percentages
# - Pasta coverage/
#   - coverage/lcov-report/index.html (abrir no browser)
```

---

## üìä TESTES ESPERADOS

### Summary

| Su√≠te | Testes | Status |
|-------|--------|--------|
| full-flow.test.ts | 5 | ‚è≥ Esperando execu√ß√£o |
| webhook-flow.test.ts | 6 | ‚è≥ Esperando execu√ß√£o |
| mapping-flow.test.ts | 6 | ‚è≥ Esperando execu√ß√£o |
| pin-generation-flow.test.ts | 7 | ‚è≥ Esperando execu√ß√£o |
| **TOTAL** | **23** | **‚è≥ Esperando execu√ß√£o** |

### Detalhamento

#### Full-Flow Tests (5 testes)
- [ ] Cen√°rio 1: Cria√ß√£o de Reserva ‚è≥
- [ ] Cen√°rio 2: Atualiza√ß√£o de Reserva ‚è≥
- [ ] Cen√°rio 3: Cancelamento ‚è≥
- [ ] Cen√°rio 4: Reconcilia√ß√£o ‚è≥
- [ ] Teste ACID ‚è≥

#### Webhook-Flow Tests (6 testes)
- [ ] Test 1: POST Webhook ‚è≥
- [ ] Test 2: Webhook Armazenado ‚è≥
- [ ] Test 3: Reservation Criado ‚è≥
- [ ] Test 4: EventId Retornado ‚è≥
- [ ] Test 5: Webhook Inv√°lido ‚è≥
- [ ] Test 6: Idempot√™ncia ‚è≥

#### Mapping-Flow Tests (6 testes)
- [ ] Test 1: Criar Mapping ‚è≥
- [ ] Test 2: Validar 1:1 ‚è≥
- [ ] Test 3: Desmapar ‚è≥
- [ ] Test 4: Remapar ‚è≥
- [ ] Test 5: Cascade Delete ‚è≥
- [ ] Test 6: Query Mappings ‚è≥

#### PIN Generation Tests (7 testes)
- [ ] Test 1: Gerar PIN ‚è≥
- [ ] Test 2: PIN Seguro ‚è≥
- [ ] Test 3: Rota√ß√£o de PIN ‚è≥
- [ ] Test 4: Expira√ß√£o ‚è≥
- [ ] Test 5: Revogar ‚è≥
- [ ] Test 6: Query por Reservation ‚è≥
- [ ] Test 7: Generator Consistency ‚è≥

---

## üéØ RESULTADOS ESPERADOS

### Coverage Esperado

```
Statements   : 85%+
Branches     : 80%+
Functions    : 85%+
Lines        : 85%+
```

### Tempo de Execu√ß√£o

- M√≠nimo: 30 segundos
- Esperado: 60-90 segundos
- M√°ximo: 120 segundos

### Estrutura de Output

```
PASS  src/__tests__/integration/full-flow.test.ts (8.234 s)
  Full-Flow Integration Tests
    ‚úì Scenario 1: Creation of Reservation (1200 ms)
    ‚úì Scenario 2: Update of Reservation (800 ms)
    ‚úì Scenario 3: Cancellation (600 ms)
    ‚úì Scenario 4: Reconciliation (1500 ms)
    ‚úì ACID Consistency Test (800 ms)

PASS  src/__tests__/integration/webhook-flow.test.ts (5.120 s)
  Webhook-Flow Integration Tests
    ‚úì Test 1: POST Webhook returns 200 (300 ms)
    ‚úì Test 2: Webhook stored in database (400 ms)
    ‚úì Test 3: Reservation created from webhook (500 ms)
    ‚úì Test 4: EventId returned (200 ms)
    ‚úì Test 5: Invalid webhook rejected (250 ms)
    ‚úì Test 6: Webhook idempotency (600 ms)

PASS  src/__tests__/integration/mapping-flow.test.ts (4.580 s)
  Mapping-Flow Integration Tests
    ‚úì Test 1: Create mapping (300 ms)
    ‚úì Test 2: Validate 1:1 constraint (350 ms)
    ‚úì Test 3: Unmap (300 ms)
    ‚úì Test 4: Remap (400 ms)
    ‚úì Test 5: Cascade delete (450 ms)
    ‚úì Test 6: Query all mappings (350 ms)

PASS  src/__tests__/integration/pin-generation-flow.test.ts (6.890 s)
  PIN Generation Integration Tests
    ‚úì Test 1: Generate PIN and create credential (600 ms)
    ‚úì Test 2: PIN is secure (hash only) (400 ms)
    ‚úì Test 3: PIN rotation (800 ms)
    ‚úì Test 4: PIN expiration handling (500 ms)
    ‚úì Test 5: PIN revocation on checkout (700 ms)
    ‚úì Test 6: Query credentials by reservation (400 ms)
    ‚úì Test 7: PIN generator consistency (800 ms)

Test Suites: 4 passed, 4 total
Tests:       23 passed, 23 total
Snapshots:   0 total
Time:        23.824 s
```

---

## üêõ TROUBLESHOOTING

### Erro 1: "ECONNREFUSED - Cannot connect to PostgreSQL"

**Sintoma:**
```
Error: connect ECONNREFUSED 127.0.0.1:5432
```

**Solu√ß√£o:**
```bash
# 1. Verificar se PostgreSQL est√° rodando
psql -U postgres -d tuya_locks_test -c "SELECT 1"

# 2. Se n√£o encontrar, iniciar
sudo systemctl start postgresql  # Linux
brew services start postgresql  # macOS
net start PostgreSQL14          # Windows (PowerShell Admin)

# 3. Verificar DATABASE_URL no .env
echo $DATABASE_URL
# Deve ser: postgresql://user:pass@localhost:5432/tuya_locks_test
```

### Erro 2: "ECONNREFUSED - Cannot connect to Redis"

**Sintoma:**
```
Error: connect ECONNREFUSED 127.0.0.1:6379
```

**Solu√ß√£o:**
```bash
# 1. Verificar se Redis est√° rodando
redis-cli ping

# 2. Se n√£o encontrar, iniciar
sudo systemctl start redis  # Linux
brew services start redis   # macOS
redis-server               # Manual

# 3. Verificar REDIS_URL no .env
echo $REDIS_URL
# Deve ser: redis://localhost:6379/1
```

### Erro 3: "relation 'Accommodation' does not exist"

**Sintoma:**
```
PrismaClientKnownRequestError: Invalid `db.accommodation.create()`
relation 'Accommodation' does not exist
```

**Solu√ß√£o:**
```bash
# 1. Executar migrations
npx prisma migrate dev

# 2. Ou resetar tudo (limpa dados!)
npx prisma migrate reset

# 3. Verificar schema
npx prisma studio
```

### Erro 4: "Test timeout - test did not complete within 30000ms"

**Sintoma:**
```
Jest did not exit one second after the test run has completed.
```

**Solu√ß√£o:**
```bash
# 1. Aumentar timeout no jest.setup.js
jest.setTimeout(60000)  // Aumentar para 60 segundos

# 2. Ou especificar por test
describe('Full-Flow', () => {
  jest.setTimeout(45000);
  test('...', () => { ... });
});

# 3. Verificar se DB est√° lenta
# - Checar √≠ndices
# - Checar queries lentas
# - Aumentar RAM de DB
```

### Erro 5: "Cannot find module '@/types'"

**Sintoma:**
```
Cannot find module '@/types'
```

**Solu√ß√£o:**
```bash
# 1. Verificar tsconfig.json path alias
# Deve ter:
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}

# 2. Ou usar caminhos relativos
import { Reservation } from '../../../src/types'
```

---

## ‚úÖ VALIDA√á√ÉO FINAL

Checklist de valida√ß√£o antes de considerar PASSO 17 completo:

### C√≥digo
- [x] 4 arquivos de teste criados
- [x] 1,440+ linhas de c√≥digo de teste
- [x] 23 cen√°rios de teste
- [x] Todos erros TypeScript corrigidos
- [x] MockLockProvider implementado
- [x] Setup/Teardown configurado

### Configura√ß√£o
- [x] npm scripts adicionados
- [x] jest.setup.js criado
- [x] jest.config.js verificado
- [x] Vari√°veis de ambiente definidas

### Documenta√ß√£o
- [x] README.md de refer√™ncia criado
- [x] PASSO_17_TESTES.md completo
- [x] PASSO_17_CHECKLIST.txt (este arquivo)

### Pr√≥ximo (FASE 2)
- [ ] Executar `npm run test:integration`
- [ ] Todos 23 testes passando
- [ ] Coverage report gerado (85%+)
- [ ] Documentar resultados

---

## üìà PR√ìXIMAS FASES

### FASE 2: Execu√ß√£o e Valida√ß√£o (Pr√≥xima)
1. Executar `npm run test:integration`
2. Debugar e corrigir falhas
3. Gerar coverage report
4. Documentar resultados

### FASE 3: E2E Tests (PASSO 18?)
1. Testcaf√© ou Cypress para UI
2. Testar fluxos completos do usu√°rio
3. Validar m√∫ltiplos navegadores

### FASE 4: Performance Tests (PASSO 19?)
1. k6 ou Artillery para load testing
2. Stress testing
3. Memory leak detection

---

## üìû REFER√äNCIA R√ÅPIDA

### Rodar Testes
```bash
npm run test:integration              # Todos
npm test full-flow.test.ts           # Espec√≠fico
npm run test:integration:watch       # Watch mode
npm run test:coverage -- --testPathPattern=__tests__/integration
```

### Ambiente
```bash
npm install                           # Instalar deps
npx prisma migrate dev               # Executar migrations
redis-cli ping                       # Verificar Redis
psql -U postgres                     # Conectar PostgreSQL
```

### Logs
```bash
npm test -- --verbose               # Com detalhes
npm test -- --bail full-flow        # Parar no primeiro erro
npm test -- --listTests             # Listar testes
```

---

## üéâ STATUS FINAL

**PASSO 17 - Testes de Integra√ß√£o Completos**

‚úÖ **Status:** 80% Completo (Arquivos criados, pronto para execu√ß√£o)

**Criado:**
- ‚úÖ 4 arquivos de teste (1,440+ linhas)
- ‚úÖ 23 cen√°rios de teste
- ‚úÖ Documenta√ß√£o completa
- ‚úÖ npm scripts
- ‚úÖ Jest configuration

**Pr√≥ximo:**
- ‚è≥ Executar testes
- ‚è≥ Validar resultados
- ‚è≥ Gerar coverage
- ‚è≥ Documentar

---

**√öltima atualiza√ß√£o:** 2024  
**Vers√£o:** PASSO 17 - 80% Completo  
**Respons√°vel:** GitHub Copilot
